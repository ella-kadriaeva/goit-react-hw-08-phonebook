{"version":3,"file":"static/js/913.2f8b7505.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Contacts/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__SkTzd\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport {\n  useCreateContactMutation,\n  useGetContactsItemsQuery,\n} from 'redux/contactsApi';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [createContact] = useCreateContactMutation();\n\n  const { data: items = [] } = useGetContactsItemsQuery();\n\n  const handleChangeName = e => setName(e.currentTarget.value);\n\n  const handleChangePhone = e => setPhone(e.currentTarget.value);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const data = {\n      id: nanoid(),\n      name,\n      phone,\n    };\n    const sameName = items.map(item => item.name).includes(data.name);\n    if (sameName) {\n      alert(`${data.name} is already in contacts`);\n    }\n    createContact(data);\n    setName('');\n    setPhone('');\n  };\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label htmlFor={nanoid()}>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChangeName}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        id={nanoid()}\n      />\n      <label htmlFor={nanoid()}>Telefon</label>\n      <input\n        type=\"tel\"\n        name=\"phone\"\n        value={phone}\n        onChange={handleChangePhone}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        id={nanoid()}\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import css from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(state => state.filter.value);\n\n  const onFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n  return (\n    <>\n      Find contacts by name\n      <input\n        className={css.input}\n        type=\"text\"\n        value={value}\n        onChange={onFilter}\n      />\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './ContactListItem.module.css';\n\nexport default function ContactListItem({\n  itemId,\n  name,\n  number,\n  deleteContacts,\n}) {\n  return (\n    <li className={css.item}>\n      <p>{name}:</p>\n      <p>{number}</p>\n      {\n        <button type=\"button\" onClick={() => deleteContacts(itemId)}>\n          Delete\n        </button>\n      }\n    </li>\n  );\n}\nContactListItem.propTypes = {\n  deleteContacts: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  itemId: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport css from './ContactList.module.css';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport {\n  useGetContactsItemsQuery,\n  useDeleteContactMutation,\n} from 'redux/contactsApi';\n\nconst getVisibleContacts = (items, value) => {\n  const normalizedFilter = value.toLowerCase().trim();\n  return items.filter(item =>\n    item.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nexport default function ContactList() {\n  const { data: items = [] } = useGetContactsItemsQuery();\n  const filterValue = useSelector(state => state.filter.value);\n  const filtredContacts = getVisibleContacts(items, filterValue);\n  const [deleteContact] = useDeleteContactMutation();\n\n  const handleDeleteContact = contactId => deleteContact(contactId);\n  return (\n    <ul className={css.list}>\n      {filtredContacts.map(({ id, name, phone }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={phone}\n          itemId={id}\n          deleteContacts={handleDeleteContact}\n        />\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\nimport css from './Contacts.module.css';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport { useGetContactsItemsQuery } from 'redux/contactsApi';\n\nconst Contacts = () => {\n  useGetContactsItemsQuery();\n  const { data, isFetching } = useGetContactsItemsQuery();\n\n  return (\n    <div className={css.container}>\n      {isFetching && <div>Loading...</div>}\n      {data && (\n        <>\n          <h2 className={css.title}>Phonebook </h2>\n          <ContactForm />\n          <h2 className={css.title}>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useState","name","setName","phone","setPhone","useCreateContactMutation","createContact","useGetContactsItemsQuery","data","items","className","css","onSubmit","e","preventDefault","map","item","includes","alert","htmlFor","type","value","onChange","currentTarget","pattern","title","required","Filter","dispatch","useDispatch","useSelector","state","filter","setFilter","ContactListItem","itemId","number","deleteContacts","onClick","ContactList","filtredContacts","normalizedFilter","toLowerCase","trim","getVisibleContacts","useDeleteContactMutation","deleteContact","handleDeleteContact","contactId","isFetching"],"sourceRoot":""}